//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DoKiSan Systems/Controls/PersonControl/Input/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5c0b5c9a-74f4-4c42-8682-9ca4fa59f0f5"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""PassThrough"",
                    ""id"": ""476b8561-e8f0-4254-9238-df3c24e6fb4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""98bb6b52-9e8f-4b10-8fae-5f6173112847"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeThis"",
                    ""type"": ""Button"",
                    ""id"": ""4d9e3c88-5609-478b-9b43-29756d9b704b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateHead"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a130b5c-4b98-475c-8540-59b2522bc331"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""796227e8-f8df-41a9-8e04-700e516ef68a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUI"",
                    ""type"": ""Button"",
                    ""id"": ""67c4ffa9-d176-4965-847d-731ddbba0038"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""997a5b2f-9dad-4fb9-af06-0e046029ed4f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fe43b99b-fc52-4880-a39a-ae5b06c8a423"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3297f340-09a7-41b2-b97d-de5fcc000f4d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6df931ec-4904-41c4-92ff-da5d93285c9d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4dbb43ad-be14-4179-9a5e-f9f5aaa43a62"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a17436db-4c4e-4b50-bd2e-d5d19859f3cd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c80afd6-b4f5-410a-802f-7be0ea641663"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeThis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60d72edb-d9fc-4130-ac68-87b23bb61589"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHead"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""701bf4c3-c247-4181-8ef7-23aed1509280"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e3f7deb-5f6b-4bdf-a9dc-047d7c39eae1"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cinemachine"",
            ""id"": ""9991f8fa-f646-4d5d-a62a-229cda7572a3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ae3528f1-bc71-44ff-b2bf-63b6e0791669"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""92e5d1c2-6a51-4f04-a719-e07e0009840c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""c083d373-cd08-4069-9a0b-a4cbc990aef2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchCamera"",
                    ""type"": ""Button"",
                    ""id"": ""60d88279-6040-4990-9e0a-bd0bf79cf3a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeltaPointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7c189d5c-a412-44ab-98c2-abbe0cbe5bee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e8bf7a3-6540-4d6f-ac26-97f3bd7d5c52"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-4,max=4)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""3b380ede-62a7-4c80-863b-dc1587b31439"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0d8f121c-1db6-4c0d-a456-8af8b41330be"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5e835991-3ae2-4ce7-a37b-b2eae6b80d7e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1a67ccee-b88b-40fb-ad5a-02c04733d66c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9522df93-c50e-4b0e-8aa5-5a818839cd93"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4fdc4082-c33c-4458-b02e-6d4ae760bcf5"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d0703e-c5af-481e-b0a9-b1d0d1fc1366"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6ddeb32-0449-4e4a-8be8-599e69b07d0f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeltaPointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Moving = m_Player.FindAction("Moving", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_TakeThis = m_Player.FindAction("TakeThis", throwIfNotFound: true);
        m_Player_RotateHead = m_Player.FindAction("RotateHead", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        m_Player_OpenUI = m_Player.FindAction("OpenUI", throwIfNotFound: true);
        // Cinemachine
        m_Cinemachine = asset.FindActionMap("Cinemachine", throwIfNotFound: true);
        m_Cinemachine_Move = m_Cinemachine.FindAction("Move", throwIfNotFound: true);
        m_Cinemachine_Rotate = m_Cinemachine.FindAction("Rotate", throwIfNotFound: true);
        m_Cinemachine_Zoom = m_Cinemachine.FindAction("Zoom", throwIfNotFound: true);
        m_Cinemachine_SwitchCamera = m_Cinemachine.FindAction("SwitchCamera", throwIfNotFound: true);
        m_Cinemachine_DeltaPointer = m_Cinemachine.FindAction("DeltaPointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Moving;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_TakeThis;
    private readonly InputAction m_Player_RotateHead;
    private readonly InputAction m_Player_Run;
    private readonly InputAction m_Player_OpenUI;
    public struct PlayerActions
    {
        private @Controller m_Wrapper;
        public PlayerActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_Player_Moving;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @TakeThis => m_Wrapper.m_Player_TakeThis;
        public InputAction @RotateHead => m_Wrapper.m_Player_RotateHead;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputAction @OpenUI => m_Wrapper.m_Player_OpenUI;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Moving.started += instance.OnMoving;
            @Moving.performed += instance.OnMoving;
            @Moving.canceled += instance.OnMoving;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @TakeThis.started += instance.OnTakeThis;
            @TakeThis.performed += instance.OnTakeThis;
            @TakeThis.canceled += instance.OnTakeThis;
            @RotateHead.started += instance.OnRotateHead;
            @RotateHead.performed += instance.OnRotateHead;
            @RotateHead.canceled += instance.OnRotateHead;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @OpenUI.started += instance.OnOpenUI;
            @OpenUI.performed += instance.OnOpenUI;
            @OpenUI.canceled += instance.OnOpenUI;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Moving.started -= instance.OnMoving;
            @Moving.performed -= instance.OnMoving;
            @Moving.canceled -= instance.OnMoving;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @TakeThis.started -= instance.OnTakeThis;
            @TakeThis.performed -= instance.OnTakeThis;
            @TakeThis.canceled -= instance.OnTakeThis;
            @RotateHead.started -= instance.OnRotateHead;
            @RotateHead.performed -= instance.OnRotateHead;
            @RotateHead.canceled -= instance.OnRotateHead;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @OpenUI.started -= instance.OnOpenUI;
            @OpenUI.performed -= instance.OnOpenUI;
            @OpenUI.canceled -= instance.OnOpenUI;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Cinemachine
    private readonly InputActionMap m_Cinemachine;
    private List<ICinemachineActions> m_CinemachineActionsCallbackInterfaces = new List<ICinemachineActions>();
    private readonly InputAction m_Cinemachine_Move;
    private readonly InputAction m_Cinemachine_Rotate;
    private readonly InputAction m_Cinemachine_Zoom;
    private readonly InputAction m_Cinemachine_SwitchCamera;
    private readonly InputAction m_Cinemachine_DeltaPointer;
    public struct CinemachineActions
    {
        private @Controller m_Wrapper;
        public CinemachineActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Cinemachine_Move;
        public InputAction @Rotate => m_Wrapper.m_Cinemachine_Rotate;
        public InputAction @Zoom => m_Wrapper.m_Cinemachine_Zoom;
        public InputAction @SwitchCamera => m_Wrapper.m_Cinemachine_SwitchCamera;
        public InputAction @DeltaPointer => m_Wrapper.m_Cinemachine_DeltaPointer;
        public InputActionMap Get() { return m_Wrapper.m_Cinemachine; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CinemachineActions set) { return set.Get(); }
        public void AddCallbacks(ICinemachineActions instance)
        {
            if (instance == null || m_Wrapper.m_CinemachineActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CinemachineActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @SwitchCamera.started += instance.OnSwitchCamera;
            @SwitchCamera.performed += instance.OnSwitchCamera;
            @SwitchCamera.canceled += instance.OnSwitchCamera;
            @DeltaPointer.started += instance.OnDeltaPointer;
            @DeltaPointer.performed += instance.OnDeltaPointer;
            @DeltaPointer.canceled += instance.OnDeltaPointer;
        }

        private void UnregisterCallbacks(ICinemachineActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @SwitchCamera.started -= instance.OnSwitchCamera;
            @SwitchCamera.performed -= instance.OnSwitchCamera;
            @SwitchCamera.canceled -= instance.OnSwitchCamera;
            @DeltaPointer.started -= instance.OnDeltaPointer;
            @DeltaPointer.performed -= instance.OnDeltaPointer;
            @DeltaPointer.canceled -= instance.OnDeltaPointer;
        }

        public void RemoveCallbacks(ICinemachineActions instance)
        {
            if (m_Wrapper.m_CinemachineActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICinemachineActions instance)
        {
            foreach (var item in m_Wrapper.m_CinemachineActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CinemachineActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CinemachineActions @Cinemachine => new CinemachineActions(this);
    public interface IPlayerActions
    {
        void OnMoving(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnTakeThis(InputAction.CallbackContext context);
        void OnRotateHead(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnOpenUI(InputAction.CallbackContext context);
    }
    public interface ICinemachineActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnSwitchCamera(InputAction.CallbackContext context);
        void OnDeltaPointer(InputAction.CallbackContext context);
    }
}
